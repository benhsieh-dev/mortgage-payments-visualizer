{"version":3,"sources":["assets/background.jpg","components/FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Containner","styled","div","InputSection","SubmitButton","button","Error","h4","FormContainer","useState","purchasePrice","setPurchasePrice","downPayment","setDownPayment","loanTerm","setLoanTerm","loanApr","setLoanApr","monthlyPayments","setMonthlyPayments","submitCalculation","e","a","preventDefault","validateField","validatedPrice","validatedPayment","validatedLoanTerm","validatedLoanApr","console","log","calculateValues","principal","monthlyInterest","numberOfPayments","monthlyPrice","field","setValue","int","parseFloat","isNaN","values","error","onChange","target","value","type","onClick","numeral","format","Container","backgroundImg","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,wC,4rFCK3C,IAAMC,EAAaC,IAAOC,IAAV,KAuCVC,EAAeF,IAAOC,IAAV,KAuCZE,EAAeH,IAAOI,OAAV,KAuBZC,EAAQL,IAAOM,GAAV,KA8FIC,EAxFO,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACjBC,EADiB,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAEjBG,EAFiB,KAEJC,EAFI,OAGQJ,mBAAS,IAHjB,mBAGjBK,EAHiB,KAGPC,EAHO,OAIMN,mBAAS,IAJf,mBAIjBO,EAJiB,KAIRC,EAJQ,OAKsBR,mBAAS,GAL/B,mBAKjBS,EALiB,KAKAC,EALA,KAOlBC,EAAiB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACtBD,EAAEE,iBADoB,SAEOC,EAAcd,EAAeC,GAFpC,cAEhBc,EAFgB,gBAGSD,EAAcZ,EAAaC,GAHpC,cAGhBa,EAHgB,gBAIUF,EAAcV,EAAUC,GAJlC,cAIhBY,EAJgB,iBAKSH,EAAcR,EAASC,GALhC,QAKhBW,EALgB,OAOlBH,GACAC,GACAC,GACAC,IAEAC,QAAQC,IAAI,2BACZC,KAbkB,4CAAH,sDAiBjBA,EAAkB,WACpB,IAAIC,EAAYtB,EAAgBE,EAC5BqB,EAAkBjB,EAAU,IAAK,GACjCkB,EAA8B,GAAXpB,EACnBqB,EACCH,EAAY,CAACC,EAAe,SAAI,EAAIA,EAAoBC,IACzD,CAAC,SAAC,EAAID,EAAoBC,GAAmB,GAC7Cf,EAAmBgB,GACnBN,QAAQC,IAAIE,IAEdR,EAAgB,SAACY,EAAOC,GAC1B,IAAIC,EAAMC,WAAWH,GACrB,MAAc,KAAVA,GAA0B,IAAVA,GAGTI,MAAMF,IAFbD,EAAS,2BAAKD,EAAMK,QAAZ,IAAoBC,MAAO,2BAC5B,IAKPL,EAASC,IACF,IAGf,OACE,6BACE,kBAACtC,EAAD,KACE,mDACA,8BACE,kBAACG,EAAD,KACE,iDACA,kBAACG,EAAD,KAAQI,EAAcgC,OACtB,2BACEC,SAAU,SAAAtB,GAAC,OAAIV,EAAiBU,EAAEuB,OAAOC,QACzCC,KAAK,UAET,kBAAC3C,EAAD,KACE,+CACA,kBAACG,EAAD,KAAQM,EAAY8B,OACpB,2BACEC,SAAU,SAAAtB,GAAC,OAAIR,EAAeQ,EAAEuB,OAAOC,QACvCC,KAAK,UAET,kBAAC3C,EAAD,KACE,oDACA,kBAACG,EAAD,KAAQQ,EAAS4B,OACjB,2BACEC,SAAU,SAAAtB,GAAC,OAAIN,EAAYM,EAAEuB,OAAOC,QACpCC,KAAK,UAET,kBAAC3C,EAAD,KACE,0CACA,kBAACG,EAAD,KAAQU,EAAQ0B,OAChB,2BACEC,SAAU,SAAAtB,GAAC,OAAIJ,EAAWI,EAAEuB,OAAOC,QACnCC,KAAK,UAET,kBAAC1C,EAAD,CAAc2C,QAAS,SAAA1B,GAAC,OAAID,EAAkBC,KAA9C,cAEF,2DAAiC2B,IAAQ9B,GAAiB+B,OAAO,WAAjE,Q,sNC7LV,IAAMC,EAAYjD,IAAOC,IAAV,IACKiD,KAgBLC,EARH,WACV,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,QCLcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLb,QAAQa,MAAMA,EAAM4B,c","file":"static/js/main.2dc7a9c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.0cba35c0.jpg\";","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport numeral from 'numeral';\n\n\nconst Containner = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center; \n    flex-direction: column;\n    padding: 3rem 0;\n    max-width: 900px;\n    margin: auto;  \n\n    h1 {\n        font-size: 35px;\n        font-weight: 500;\n        color: #2a6279;\n        margin-bottom: 10px;\n        text-transform: uppercase; \n    }\n\n    h3 {\n        font-weight: 400;\n        font-size: 20px;\n        line-height: 28px;\n        margin-top: 3rem;\n        background: #fff;\n        padding: 3rem;\n        color: #2a6279;\n        box-shadow: 0 0 1px 0 rgba(8, 11, 14, 0.06),\n        0 6px 6px -1px rgba(8, 11, 14, 0.1);\n        border-radius: 1rem; \n    }\n\n    form {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-wrap: wrap;\n        margin-top: 1 rem; \n    }\n`;\n\nconst InputSection = styled.div`\n  width: 45%;\n  min-width: 350px;\n  max-width: 450px;\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n\n  label {\n    text-transform: uppercase;\n    /* font-weight: 400; */\n    font-weight: 700;\n    font-size: 1.5rem; \n    /* color: grey; */\n    color: #000;\n    margin-bottom: 0.5rem;\n  }\n\n  input {\n    /* background: rgba(255, 255, 255, 0.3); */\n    background: #fff; \n    height: 35px;\n    border: none;\n    border-radius: 10px;\n    padding: 0 1rem;\n    color: #2a6279;\n    font-weight: 500;\n\n    box-shadow: 0 0 1px 0 rgba(8, 11, 14, 0.06),\n      0 6px 6px -1px rgba(8, 11, 14, 0.1);\n    transition: all 0.3s ease-in-out; \n    &:hover,\n    &:focus {\n      box-shadow: 0 0 1px 0 rgba(8, 11, 14, 0.06),\n        0 16px 16px -1px rgba(8, 11, 14, 0.1);\n    }\n  }\n`;\n\nconst SubmitButton = styled.button`\n  background-color: #d8a051;\n  color: #fff;\n  border: none;\n  width: 150px;\n  height: 36px;\n  font-family: \"Oswald\", sans-serif;\n  font-size: 14px;\n  letter-spacing: 0.03em;\n  line-height: 36px;\n  border-radius: 2px;\n  box-shadow: 0 0 1px 0 rgba(8, 11, 14, 0.06),\n    0 6px 6px -1px rgba(8, 11, 14, 0.1);\n  cursor: pointer; \n  margin-top: 1rem; \n  transition: all 0.3s ease-in-out;\n  &:hover,\n  &:focus {\n    box-shadow: 0 0 1px 0 rgba(8, 11, 14, 0.06),\n      0 16px 16px -1px rgba(8, 11, 14, 0.1);\n  }\n`;\n\nconst Error = styled.h4`\n    color: red;\n    font-size: 13px;\n    margin-bottom: 1rem; \n    `;\n\nconst FormContainer = () => {\n    const [purchasePrice, setPurchasePrice] = useState('');\n    const [downPayment, setDownPayment] = useState('');\n    const [loanTerm, setLoanTerm] = useState('');\n    const [loanApr, setLoanApr] = useState('');\n    const [monthlyPayments, setMonthlyPayments] = useState(0.0)\n\n    const submitCalculation = async (e) => {\n        e.preventDefault();\n        const validatedPrice = await validateField(purchasePrice, setPurchasePrice);\n        const validatedPayment = await validateField(downPayment, setDownPayment);\n        const validatedLoanTerm = await validateField(loanTerm, setLoanTerm);\n        const validatedLoanApr = await validateField(loanApr, setLoanApr);\n        if (\n            validatedPrice &&\n            validatedPayment &&\n            validatedLoanTerm &&\n            validatedLoanApr\n        ) {\n            console.log('Form is fully validated');\n            calculateValues();\n        }\n    }\n\n    const calculateValues = () => {\n        let principal = purchasePrice - downPayment;\n        let monthlyInterest = loanApr / 100 /12;\n        let numberOfPayments = loanTerm * 12;\n        let monthlyPrice = \n            (principal * [monthlyInterest * (1 + monthlyInterest) ** numberOfPayments]) /\n            [(1 + monthlyInterest) ** numberOfPayments - 1];\n            setMonthlyPayments(monthlyPrice);\n            console.log(principal); \n    }\n    const validateField = (field, setValue) => {\n        let int = parseFloat(field);\n        if (field === '' || field === 0) {\n            setValue({ ...field.values, error: \"Please enter a value\"});\n            return false;\n        } else if (isNaN(int)) {\n            setValue({ ...field.values, error: \"Please enter a value\"});\n            return false;\n        } else {\n            setValue(int);\n            return true; \n        }\n    }\n    return (\n      <div>\n        <Containner>\n          <h1>Mortgage Calculator</h1>\n          <form>\n            <InputSection>\n              <label>Purchase Price</label>\n              <Error>{purchasePrice.error}</Error>\n              <input \n                onChange={e => setPurchasePrice(e.target.value)}\n                type=\"text\" />\n            </InputSection>\n            <InputSection>\n              <label>Down Payment</label>\n              <Error>{downPayment.error}</Error>\n              <input \n                onChange={e => setDownPayment(e.target.value)}\n                type=\"text\" />\n            </InputSection>\n            <InputSection>\n              <label>Loan Term (Years)</label>\n              <Error>{loanTerm.error}</Error>\n              <input \n                onChange={e => setLoanTerm(e.target.value)}\n                type=\"text\" />\n            </InputSection>\n            <InputSection>\n              <label>APR (%)</label>\n              <Error>{loanApr.error}</Error>\n              <input \n                onChange={e => setLoanApr(e.target.value)}\n                type=\"text\" />\n            </InputSection>\n            <SubmitButton onClick={e => submitCalculation(e)}>Calculate</SubmitButton>\n          </form>\n          <h3>Estimated Monthly Payments: {numeral(monthlyPayments).format('$0,0.00')} </h3>\n        </Containner>\n      </div>\n    );\n}\n\nexport default FormContainer; ","import React from 'react';\nimport styled from 'styled-components';\nimport backgroundImg from './assets/background.jpg';\nimport FormContainer from './components/FormContainer'; \n\nconst Container = styled.div`\n  background: url(${backgroundImg});\n  background-size: cover;\n  background-position: center;\n  padding: 2rem 0; \n  height: 100vh;\n  width: 100vw; \n  `;\n\nconst App = () => {\n  return (\n    <Container>\n      <FormContainer />\n    </Container>\n  )\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}